|**
	Ocean Green Village Dailys
	
	Written By: Jaara
	Date Written: 2 August 2021
	Revision:
		2.0: Changed InvSlots to be ${FindItem[<Item>].InvSlot} to make items not position sensative.
			Refactored code to be more readable.
			Added functions.
			Switched to event based rather than function based
		
		
	Description:
		Walk close to the NPCs, type in /mac dbxDaily2, then /echo [quest]
		Quests are Shrimp, Carrots, Cucumbers, Radish, Saibaman, Vegetables
		
		You should probably make a social for each command
		/echo shrimping
		/echo radishing
		/echo saibamaning
		/echo cucumbering
		/echo carroting
		/echo vegetabling
		

	Store Carrots/Radishes/Shrimp/Saibaman Brains/Cucumbers in Pack #9
	
		Carrots: Pack#9 Slot #1
		Radish: Pack#9 Slot #2
		Shrimp: Pack#9 Slot #3
		Saibaman Brains: Pack#9 Slot #4
		Cucumbers: Pack#9 Slot #5
		Reward from Snapp Ple (the juice used for the salad): Pack#9 Slot #6
	
	Store Items from bosses Icy Mug/Jumbo Shrimp/Pickle Juice/Horse Radish is Pack#8
		Icy Mug: Pack#8 Slot #1
		Jumbo Shrimp: Pack#8 Slot #2
		Pickle Juice: Pack#8 Slot #3
		Horse Radish: Pack#8 Slot #4

	Place Rewards from each NPC in the boss bag, doesn't matter exactly which slot, as long as they're Pack#8 Slots #5, #6, #dlypressGiveButton, #8
**|

#turbo 1

#Event Shrimping "[MQ2] shrimping"
#Event Radishing "[MQ2] radishing"
#Event Saibamaning "[MQ2] saibamaning"
#Event Cucumbering "[MQ2] cucumbering"
#Event Carroting "[MQ2] carroting"
#Event Vegetabling "[MQ2] vegetabling"
#Event NoTaskAvailable		"#*#Im sorry #1#"

sub main()
	| ItemSlot Definations
	
	/if (!${Defined[sltCarrot]}) /declare sltCarrot int outer ${FindItem[Clockwork Carrot].InvSlot}
	/if (!${Defined[sltRadish]}) /declare sltRadish int outer ${FindItem[Raging Radish Heart].InvSlot}
	/if (!${Defined[sltShrimp]}) /declare sltShrimp int outer ${FindItem[Small Shrimp].InvSlot}
	/if (!${Defined[sltSaibaman]}) /declare sltSaibaman int outer ${FindItem[Saibaman Brain].InvSlot}
	/if (!${Defined[sltCucumber]}) /declare sltCucumber int outer ${FindItem[A Cucumber].InvSlot}
	
	/if (!${Defined[sltJuice]}) /declare sltJuice int outer ${FindItem[Icy Cold Saibaman Juice].InvSlot}

	/if (!${Defined[sltMug]}) /declare sltMug int outer ${FindItem[King Coldone].InvSlot}
	/if (!${Defined[sltJumbo]}) /declare sltJumbo int outer ${FindItem[Jumbo].InvSlot}
	/if (!${Defined[sltPickle]}) /declare sltPickle int outer ${FindItem[Possessed Pickle].InvSlot}
	/if (!${Defined[sltHorse]}) /declare sltHorse int outer ${FindItem[Raw Horse].InvSlot}

	/if (!${Defined[sltCutCarrots]}) /declare sltCutCarrots int outer ${FindItem[Cut Carrots].InvSlot}
	/if (!${Defined[sltBoiledShrimp]}) /declare sltBoiledShrimp int outer ${FindItem[Boiled Shrimp].InvSlot}
	/if (!${Defined[sltPickleSauce]}) /declare sltPickleSauce int outer ${FindItem[Pickle Sauce].InvSlot}
	/if (!${Defined[sltChoppedRadish]}) /declare sltChoppedRadish int outer ${FindItem[Chopped Radish].InvSlot}
	
	|delays
	/if (!${Defined[dlypressGiveButton]}) /declare dlypressGiveButton int outer 5
	/if (!${Defined[dlyTaskAccept]}) /declare dlyTaskAccept int outer 10
	
	/echo Starting Daily Quest Macro
	:MainLoop
		/doevents
		/delay 1s
	/goto :MainLoop
	
/return


sub Event_Shrimping()
	/tar Krill In
	/call moveToTarget
	
	/delay 3
	/say shrimps
	
	/delay ${dlyTaskAccept}
	/doevents |stop macro if task is unavailable
	/call pressTaskAcceptButton |press accept task button

	/declare handin int local
	/for handin 1 to 4
		/call handItemFromSlot ${sltShrimp}
	/next handin
	
	/call pressGiveButton |press the Give button

	/call handItemFromSlot ${sltJumbo}
	
	/call pressGiveButton |press the Give button
/return

sub Event_Carroting()
	/tar Kak Carrot
	/call moveToTarget
	
	/delay 3
	/say carrots
	
	/delay ${dlyTaskAccept}
	/doevents |stop macro if task is unavailable
	/call pressTaskAcceptButton |press accept task button

	/declare handin int local
	/for handin 1 to 4
		/call handItemFromSlot ${sltCarrot}
	/next handin
	
	/call pressGiveButton |press the Give button
/return

sub Event_Cucumbering()
	/tar Picco Lo
	/call moveToTarget
	
	/delay 3
	/say cucumbers
	
	/delay ${dlyTaskAccept}
	/doevents |stop macro if task is unavailable
	/call pressTaskAcceptButton |press accept task button

	/declare handin int local
	/for handin 1 to 4
		/call handItemFromSlot ${sltCucumber}
	/next handin
	
	/call pressGiveButton |press the Give button

	/call handItemFromSlot ${sltPickle}
	
	/call pressGiveButton |press the Give button

/return

sub Event_Radishing()
	/tar Radit Zsh
	/call moveToTarget
	
	/delay 3
	/say radishes
	
	/delay ${dlyTaskAccept}
	/doevents |stop macro if task is unavailable
	/call pressTaskAcceptButton |press accept task button

	/declare handin int local
	/for handin 1 to 4
		/call handItemFromSlot ${sltRadish}
	/next handin
	
	/call pressGiveButton |press the Give button

	/call handItemFromSlot ${sltHorse}
	
	/call pressGiveButton |press the Give button
/return

sub Event_Saibamaning()	
	/tar Snapp Aple	
	/call moveToTarget
	
	/delay 3
	/say Drinks
	
	/delay ${dlyTaskAccept}
	/doevents |stop macro if task is unavailable
	/call pressTaskAcceptButton |press accept task button
	
	/declare handin int local
	/for handin 1 to 4
		/call handItemFromSlot ${sltSaibaman}
	/next handin
	
	/call pressGiveButton |press the Give button

	/call handItemFromSlot ${sltMug}
	
	/call pressGiveButton |press the Give button
	
	/declare rewards int local
	/for rewards 1 to ${dlypressGiveButton}
		/autoinv
		/delay 5
	/next rewards
/return

sub Event_Vegetabling()
	/tar Prince Vegetable
	/call moveToTarget
	
	/delay 3
	/say Salad
	
	/delay ${dlyTaskAccept}
	/doevents |stop macro if task is unavailable
	/call pressTaskAcceptButton |press accept task button
	
	/call handItemFromSlot ${sltCutCarrots}
	/call handItemFromSlot ${sltBoiledShrimp}
	/call handItemFromSlot ${sltChoppedRadish}
	/call handItemFromSlot ${sltPickleSauce}
	/call pressGiveButton |press the Give button
	
	
	/call handItemFromSlot ${sltJuice}
	/call pressGiveButton |press the Give button

	/declare rewards int local
	/for rewards 1 to 6
		/autoinv
		/delay 5
	/next rewards
/return

sub pressTaskAcceptButton()
	:backToTask
	/if (${Window[TaskSelectWnd]})	{
		/delay ${dlyTaskAccept}
		/notify TaskSelectWnd TSEL_AcceptButton leftmouseup
		/goto :backToTask
	}
	
	/delay ${dlyTaskAccept}
/return

sub pressGiveButton()
	:backTopressGiveButton
	/if (${Window[GiveWnd]}) {
		/delay ${dlypressGiveButton}	
		/notify GiveWnd GVW_Give_Button leftmouseup
		/goto :backTopressGiveButton
	}
	
	/delay ${dlypressGiveButton}
/return

sub handItemFromSlot()
	/if (${Param0.Equal[0]}) {
		/echo Can't find item
		/return
	}
	/delay ${dlypressGiveButton}
	/ctrlkey /itemnotify ${Param0} leftmouseup
	/click left target
	
	/delay ${dlypressGiveButton}
/return

sub moveToTarget
	:keepMovingToTarget
	/if (${Target.Distance}>30) {
		/delay 3
		/moveto id ${Target.ID}
		/goto :keepMovingToTarget
	}
/return

sub Event_NoTaskAvailable(noDailyMessage)
	/echo No Task Available for ${noDailyMessage}
	
	/endmacro
/return